apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-smartide-cli

spec:
  description: >-
    This Task is Golang task to test Go projects.

  params:
    - name: COMMAND
      description: smartide command
      type: string
      default: 
    - name: ARGS
      description: command args
      type: string
      default: 
    - name: HOST
      description: SSH host
      type: string
      default: 
    - name: SSH_USER_NAME
      description: ssh login user name
      type: string
      default: 
    - name: SSH_USER_PASSWORD
      description: password
      type: string
      default: ""
    - name: GIT_CLONE_URL
      description: git clone url
      type: string
      default: 

    - name: SERVER_WORK_SPACE_ID
      description: 服务端工作区ID
      type: string
      default:   
    - name: SERVER_WORK_SPACE_NO
      description: 服务端工作区NO
      type: string
      default:   
    - name: SERVER_USER_NAME
      description: 服务端用户名
      type: string
      default:   
    - name: SERVER_USER_GUID
      description: 服务端用户GUID
      type: string
      default:   
    - name: SERVER_HOST
      description: server 登录地址
      type: string
      default: 
    - name: SERVER_TOKEN
      description: 服务端TOKEN
      type: string
      default: 

  steps:
    - name: smartide-cli
      image: registry.cn-hangzhou.aliyuncs.com/smartide/smartide-cli:4498

      script: |
        #!/bin/bash

        echo "hello smartide"

        smartide version


        if [ "$(params.COMMAND)" == "start" ]; then 
          echo "smartide start running"
          echo "smartide start $(params.ARGS) --debug --mode server --isInsightDisabled false --host '$(params.HOST)' --username '$(params.SSH_USER_NAME)' --password '$(params.SSH_USER_PASSWORD)' --repourl '$(params.GIT_CLONE_URL)' --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' --serverownerguid '$(params.SERVER_USER_GUID)'"
          smartide start $(params.ARGS) --debug --mode server --isInsightDisabled false --host '$(params.HOST)' --username '$(params.SSH_USER_NAME)' --password '$(params.SSH_USER_PASSWORD)' --repourl '$(params.GIT_CLONE_URL)' --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' --serverownerguid '$(params.SERVER_USER_GUID)'
        elif [ "$(params.COMMAND)" == "new" ]; then 
          echo "smartide new running"
          echo "smartide new $(params.ARGS) --debug --mode server --isInsightDisabled false --host '$(params.HOST)' --username '$(params.SSH_USER_NAME)' --password '$(params.SSH_USER_PASSWORD)' --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' "
          smartide new $(params.ARGS) -y --debug --mode server --isInsightDisabled false --host '$(params.HOST)' --username '$(params.SSH_USER_NAME)' --password '$(params.SSH_USER_PASSWORD)' --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'  
        elif [ "$(params.COMMAND)" == "k8s" ]; then 
          echo "smartide k8s running"
          echo "smartide start $(params.ARGS) --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' "
          smartide start $(params.ARGS) --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' --serverownerguid '$(params.SERVER_USER_GUID)'
        elif [ "$(params.COMMAND)" == "ingress" ]; then 
          echo "smartide k8s ingress running"
          echo "smartide k8s $(params.ARGS) --debug --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' "
          smartide k8s $(params.ARGS) --debug --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'
        elif [ "$(params.COMMAND)" == "applyssh" ]; then 
          echo "smartide k8s applyssh running"
          echo "smartide k8s applyssh $(params.ARGS) --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)' "
          smartide k8s applyssh $(params.ARGS) --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'
        else
          echo "smartide $(params.COMMAND) $(params.SERVER_WORK_SPACE_NO) running"

          if [ "$(params.COMMAND)" == "stop" ]; then
            smartide $(params.COMMAND) $(params.ARGS) $(params.SERVER_WORK_SPACE_NO) --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'
          elif [ "$(params.COMMAND)" == "remove" ]; then   
            smartide $(params.COMMAND) $(params.ARGS) $(params.SERVER_WORK_SPACE_NO) -pyfi --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'
          elif [ "$(params.COMMAND)" == "remove_container" ]; then   
            smartide remove $(params.SERVER_WORK_SPACE_NO) $(params.ARGS) -y -c --debug --mode server --isInsightDisabled false --serverhost '$(params.SERVER_HOST)' --serverworkspaceid '$(params.SERVER_WORK_SPACE_ID)' --serverusername '$(params.SERVER_USER_NAME)' --servertoken '$(params.SERVER_TOKEN)'
          else
            echo "未知的命令！"
          fi
        fi

        echo "end"
